Topics of system design:
1. client-server Architecture
        Client-server architecture is a computing model where a client requests resources or services from a central server, which then provides them. This architecture is fundamental in many network-based systems, including the internet and its applications. Clients, like web browsers or email applications, initiate request
while the server manages and delivers the requested information or services. 

2.IP address
     An IP address, or Internet Protocol address, is a unique numerical label assigned to each device connected to a computer network that uses the Internet Protocol for communication. It's essentially a device's address on the internet, 
allowing other devices to find and communicate with it. 

3.Domain name system 
     The Domain Name System (DNS) is a fundamental part of the internet that translates human-readable domain names (like google.com) into machine-readable IP addresses (like 172.217.160.142). This translation allows users to access websites and other online resources using easy-to-remember names instead of complex IP addresses. DNS acts like a phonebook for the internet, connecting domain names to the corresponding IP addresses that computers use to communicate. 

4.Proxy or reverse proxy
    A proxy server acts as an intermediary, forwarding client requests to other servers, while a reverse proxy sits in front of servers, receiving client requests and forwarding them to the appropriate server. Essentially, a proxy (or forward proxy) protects the client, while a reverse proxy protects the server.

5.Latecy
    Latency refers to the delay between a user action and the system's response. In simpler terms, it's the time it takes for data to travel from one point to another in a network or system. This delay is usually measured in milliseconds and can affect various applications, from web browsing to online gaming and AI interactions.
6.http/https
     HTTP and HTTPS are both protocols used for communication between a web browser and a web server, but HTTPS is the secure version. HTTP stands for Hypertext Transfer Protocol, while HTTPS stands for Hypertext Transfer Protocol Secure. The key difference is that HTTPS encrypts data transmitted between the browser and the server using SSL/TLS, making it more secure than HTTP, which transmits data in plain text. 
